version: '3.8'

services:
  mongo:
    container_name: ship-mongo
    image: mongo:4.2
    command: --replSet rs --bind_ip_all
    environment:
      - MONGO_INITDB_ROOT_USERNAME=root
      - MONGO_INITDB_ROOT_PASSWORD=root
    networks:
      - ship
    ports:
      - 27017:27017
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - type: volume
        source: mongodb
        target: /data/db
      - type: volume
        source: mongodb-cfg
        target: /data/configdb
  mongo-replicator:
    container_name: ship-mongo-replicator
    build: ../mongo-replicator
    environment:
      - HOST=mongo
      - PORT=27017
      - USERNAME=root
      - PASSWORD=root
      - REPLICA_SET_NAME=rs
    networks:
      - ship
    depends_on:
      - mongo
  migrator:
    container_name: ship-migrator
    build:
      context: .
      dockerfile: app/Migrator.NoSql/Dockerfile
    networks:
      - ship
    environment:
      - DOTNET_ENVIRONMENT=Development
    depends_on:
      mongo-replicator:
        condition: service_completed_successfully
  redis:
    container_name: ship-redis
    image: redis:5.0.5
    command: redis-server --appendonly yes
    hostname: redis
    networks:
      - ship
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - 6379:6379
  api:
    container_name: ship-api
    build:
      context: .
      dockerfile: app/Api.NoSql/Dockerfile
    networks:
      - ship
    volumes:
      - ./api/src:/app/src
    depends_on:
      migrator:
        condition: service_completed_successfully
      redis:
        condition: service_healthy
    ports:
      - "3001:3001"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:3001
  signal-r:
    container_name: ship-signal-r
    build:
      context: .
      dockerfile: app/SignalR/Dockerfile
    networks:
     - ship
    volumes:
      - ./api/src:/app/src
    depends_on:
      - "api"
    ports:
      - "3003:3003"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:3003
      - WAIT_FOR_HOST=api
      - WAIT_FOR_PORT=3001
  scheduler:
    container_name: ship-scheduler
    build:
      context: .
      dockerfile: app/Scheduler/Dockerfile
    networks:
      - ship
    volumes:
      - ./api/src:/app/src
    depends_on:
      migrator:
        condition: service_completed_successfully
    environment:
      - DOTNET_ENVIRONMENT=DevelopmentNoSql

networks:
  ship:
    name: ship_network

volumes:
  mongodb:
  mongodb-cfg: